#ifndef __HSEXTERNS_H
#define __HSEXTERNS_H

#include "hstypes.h"


/* hscmds.c */
COMMAND_PROTO(cmd_com);
COMMAND_PROTO(cmd_console);
COMMAND_PROTO(cmd_man);
COMMAND_PROTO(cmd_unman);
COMMAND_PROTO(cmd_board);
COMMAND_PROTO(cmd_disembark);
COMMAND_PROTO(cmd_eject);
COMMAND_PROTO(cmd_space);
extern void set_prompt(dbref console);
extern void man_console(dbref player, char *where);
extern void unman_console(dbref player);
extern void board_ship(dbref player, char *which, char *code);
extern void disembark(dbref player);
extern void emergency_eject(dbref player);
extern void hs_spawn(dbref player, char *which);
extern void hs_list(dbref executor, char *arg_left, char *arg_right);
extern void hs_move(dbref executor, char *arg_left, char *arg_right);
extern char *decay_msg(char *msg, double decay);
extern void send_com(dbref from, char *arg_left, char *arg_right);

/* hscombat.c */
extern hstringmap hs_effects[];
extern hstringmap hs_stances[];
extern hstringmap hs_hacks[];
extern hstringmap hs_shunts[];
extern hstringmap hs_cooldowns[];
extern hbuff_effect COOLDOWN_jump_drive;
extern hbuff_effect COOLDOWN_ping;
extern hbuff_effect EFFECT_remote_ping_bonus;
extern hbuff_effect EFFECT_ping_bonus;
extern hbuff_effect EFFECT_missile;
extern hbuff_effect EFFECT_emitter_beam;
extern hbuff_effect EFFECT_residue;
extern hbuff_effect EFFECT_shield_failure;
extern hbuff_effect EFFECT_reactor_failure;
extern hbuff_effect EFFECT_engine_failure;
extern hbuff_effect EFFECT_sensor_failure;
extern hbuff_effect EFFECT_computer_failure;
extern hbuff_effect EFFECT_weapon_failure;
extern hbuff_effect EFFECT_shield_recharge;
extern hbuff_effect EFFECT_engine_overdrive;
extern hbuff_effect EFFECT_missile_bonus;
extern hbuff_effect EFFECT_evasion_bonus;
extern hbuff_effect EFFECT_speed_bonus;
extern hbuff_effect EFFECT_cannon_power_bonus;
extern hbuff_effect EFFECT_cannon_accuracy_bonus;
extern hbuff_effect EFFECT_cannon_penetration_bonus;
extern hbuff_effect EFFECT_cannon_reload_bonus;
extern hbuff_effect EFFECT_capacitor_bonus;
extern hbuff_effect EFFECT_booster_bonus;
extern hbuff_effect EFFECT_emitter_bonus;
extern HBUFF_CALL(activate_cooldown);
extern hbuff_effect *find_effect(hstringmap *map, char *which);
extern hbuff *find_buff(hship *ship, hbuff_effect *bptr);
extern int clear_buffs(hship *ship);
extern hbuff *add_buff(hship *ship, hbuff_effect *bptr);
extern void switch_stance(dbref console, char *which);
extern double get_system_stat(hsystem *sys, hstat stat);
extern double get_stat(hship *ship, hstat stat);
extern double get_weapon_stat(hweapon *gun, hwstat stat);
extern double get_wstat(hship *ship, hconsole *con, hwstat stat);
extern int do_damage(hship *ship, double shield, double hull, double penetration);
extern void use_cooldown(dbref console, char *which);
extern int fire_weapon(hship *ship, hconsole *con, hweapon *gun, hcontact *q, double var, int showmsg);

/* hsconfig.c */
extern hconfig hs_options;
extern hconfigitem hs_conflist[];
extern void hs_print_config(dbref player, const char *which);
extern int hspace_parse_option(char *option, char *value);
extern int hs_load_config(dbref player);

/* hsconsole.c */
extern hstringmap hs_nav_modes[];
extern hstringmap hs_prompt_flags[];
extern void use_slot(dbref console, char *arg_left, hslot stat, int showmsg);
extern void use_both_slots(dbref console, char *arg_left);
extern void use_wormhole(dbref obj, char *arg_left);
extern void set_baydoors(dbref obj, int open);
extern void set_boardinglink(dbref obj, int open);
extern void set_pvp(dbref obj, int on);
extern void set_waypoint(dbref obj, char *arg_left);
extern void set_heading(dbref obj, char *arg_left, char *arg_right);
extern void change_speed(hship *ship, double speed);
extern void set_speed(dbref obj, char *arg_left);
extern void change_afterburner(hship *ship, int engage);
extern void set_afterburner(dbref obj, int engage);
extern void unlink_ship(dbref obj);
extern void link_ship(dbref obj, char *arg_left);
extern void land_ship(dbref obj, char *arg_left, char *arg_right);
extern void dock_ship(dbref obj, char *arg_left);
extern void launch_ship(dbref con);
extern void do_view(dbref con);
extern void do_taxi(dbref con, char *which);
extern void set_navmode(dbref console, char *which);
extern void dump_cargo(dbref con, char *which, char *amount);
extern void add_equipment(dbref player, dbref obj);
extern void add_cash(dbref player, int cash);
extern void add_cargo(hship *ship, char *which, int amount);
extern void add_missionitem(dbref player, dbref obj);
extern int has_mission(dbref player, dbref m);
extern int has_missionitem(dbref player, dbref m);
extern void tractor_cargo(dbref con, char *which);
extern void cargo_manifest(dbref con);
extern void ship_status(dbref con);
extern void system_status(dbref con);
extern void quick_status(dbref con);
extern void effect_status(dbref con);
extern void combat_status(dbref console);
extern void sensor_scan(dbref console, char *which);

/* hscontacts.c */
extern hstringmap hs_factions[];
extern int check_ship_size(hship *ship);
extern int check_friend(hship *ship, hcontact *q);
extern const char *ship_name(hship *ship);
extern const char *celestial_name(hcelestial *cel);
extern const char *contact_name(hcontact *q);
extern dbref contact_objnum(hcontact *q);
extern double ship_distance(hship *s, hship *t);
extern double ship_celestial_distance(hship *s, hcelestial *t);
extern double celestial_distance(hcelestial *s, hcelestial *t);
extern double contact_distance(hcontact *s, hcontact *t);
extern int contact_xyang(hship *s, hcontact *t);
extern int contact_zang(hship *s, hcontact *t);
extern hcontact *get_head_contact(hship *ship);
extern hship *get_lock(hship *ship);
extern int has_lock(hship *ship, hship *target);
extern void change_lock(hship *ship, hconsole *con, hcontact *q);
extern void set_lock(dbref console, char *which);
extern char *contact_colorstring(hship *ship, hcontact *q);
extern int check_ship_range(hship *ship, hship *target);
extern int check_celestial_range(hship *ship, hcelestial *target);
extern hcontact *find_contact(hship *ship, int cnum);
extern hcontact *find_ship_contact(hship *ship, hship *target);
extern hcontact *find_celestial_contact(hship *ship, hcelestial *target);
extern int generate_cnum(hship *ship);
extern hcontact *add_ship_contact(hship *ship, hship *target);
extern hcontact *add_celestial_contact(hship *ship, hcelestial *target);
extern int del_contact(hship *ship, hcontact *contact);
extern int clear_contacts(hship *ship);
extern hcontact *update_ship_contact(hship *ship, hship *sptr);
extern hcontact *update_celestial_contact(hship *ship, hcelestial *cptr);
extern void update_contacts(hship *ship);
extern int sort_internal(double **a, hcontact ***contacts, int l, int r);
extern void sort_by_distance(double **a, hcontact ***contacts, int l, int r);
extern void sensor_report(dbref cship, char *arg_left);
extern void show_eta(dbref cship);

/* hsdb.c */
extern int hs_num_universes;
extern huniverse *hs_universes;
extern int hs_num_celestials;
extern hcelestial *hs_celestials;
extern int hs_num_ships;
extern hship *hs_ships;
extern int hs_num_missions;
extern hmission *hs_missions;
extern int hs_num_combat_ids;
extern hstringmap hs_object_types[];
extern hstringmap hs_weapon_types[];
extern hstringmap hs_system_types[];
extern hstringmap hs_console_types[];
extern int init_arrays();
extern int atr_parse_integer(dbref obj, char *name, int default_value);
extern dbref atr_parse_dbref(dbref obj, char *name);
extern double atr_parse_double(dbref obj, char *name, double default_value);
extern char *atr_parse_string(dbref obj, char *name);
extern void *stringmap_value(hstringmap *stringmap, const char *s);
extern char *stringmap_string(hstringmap *stringmap, void *data);
extern int parse_flags(hstringmap *map, char *buff);
extern int atr_parse_flags(dbref obj, hstringmap *map, char *name);
extern hcallback atr_parse_callback(dbref obj, char *name);
extern huniverse *load_universe(dbref player, dbref obj);
extern huniverse *find_universe(dbref obj);
extern int load_celestial_attributes(hcelestial *cel, int reload);
extern hcelestial *load_celestial(dbref player, dbref obj);
extern hcelestial *create_debris(huniverse *uid, double x, double y, double z);
extern void dump_celestial(hcelestial *cel);
extern hcelestial *find_celestial(dbref obj);
extern int load_ship_attributes(hship *ship, int reload);
extern hship *load_ship(dbref player, dbref obj);
extern hship *create_drone(dbref obj);
extern hship *spawn_drone(dbref obj, huniverse *uid, double x, double y, double z);
extern void dump_ship(hship *ship);
extern hship *find_ship_by_nav(dbref nav);
extern hship *find_ship(dbref obj);
extern hconsole *load_console(dbref player, dbref obj);
extern hconsole *find_console(dbref obj);
extern void clear_weapon(hweapon *gun);
extern int load_weapon(dbref console, hweapon *gun, hslot type);
extern int load_system(dbref nav, hsystem *sys, hsys type);
extern int load_spawn(hspawn *spawn, int i, int reload);
extern hmission *load_mission(dbref player, dbref obj);
extern int load_space_object(dbref player, const char *which);

/* hsdrone.c */
extern hstringmap hs_callbacks[];
extern HCALLBACK(dummy_event_handler);
extern HCALLBACK(drone_heart);
extern HCALLBACK(station_keeping);
extern HCALLBACK(generic_turret);
extern HCALLBACK(drone_contact);
extern HCALLBACK(generic_heartbeat);
extern HCALLBACK(generic_proximity);

/* hseng.c */
extern hbuff_effect STANCE_boost_engine;
extern hbuff_effect STANCE_boost_reactor;
extern hbuff_effect STANCE_boost_sensor;
extern hbuff_effect STANCE_boost_computer;
extern hbuff_effect STANCE_boost_weapons;
extern hbuff_effect STANCE_sensor_bypass;
extern hbuff_effect STANCE_reactor_bypass;
extern hbuff_effect STANCE_engine_bypass;
extern hbuff_effect STANCE_shield_bypass;
extern hbuff_effect COOLDOWN_overcharge;
extern hbuff_effect COOLDOWN_compensate;
extern hbuff_effect COOLDOWN_short;
extern hbuff_effect COOLDOWN_boost;
extern HBUFF_CALL(reload_eng);
extern void use_shunt(dbref console, char *which);
extern int fire_capacitor(hship *ship, hconsole *con, hweapon *gun, hcontact *q);
extern int fire_booster(hship *ship, hconsole *con, hweapon *gun, hcontact *q);

/* hsfunctions.c */
FUNCTION_PROTO(fun_hs_cycle);
FUNCTION_PROTO(fun_hs_load);
FUNCTION_PROTO(fun_hs_com);
FUNCTION_PROTO(fun_hs_salvage);
FUNCTION_PROTO(fun_hs_cooldown);
FUNCTION_PROTO(fun_hs_get);
FUNCTION_PROTO(fun_hs_set);
FUNCTION_PROTO(fun_hs_srep);
extern void get_ship_attribute(hship *ship, char *which, char *buff, char **bp);
extern void set_ship_attribute(hship *ship, char *which, char *value);
extern void get_celestial_attribute(hcelestial *cel, char *which, char *buff, char **bp);
extern void set_celestial_attribute(hcelestial *cel, char *which, char *value);

/* hsgun.c */
extern hbuff_effect STANCE_standard_cannon;
extern hbuff_effect STANCE_shield_cannon;
extern hbuff_effect STANCE_hull_cannon;
extern hbuff_effect STANCE_penetrate_cannon;
extern hbuff_effect COOLDOWN_overload;
extern hbuff_effect COOLDOWN_sixoclock;
extern hbuff_effect COOLDOWN_sniper;
extern hbuff_effect COOLDOWN_pierce;
extern hbuff_effect COOLDOWN_rapid;
extern hbuff_effect COOLDOWN_ignite;
extern HBUFF_CALL(purge_missile);
extern HBUFF_CALL(ignite_residue);
extern int fire_cannon(hship *ship, hconsole *con, hweapon *gun, hcontact *q);
extern HBUFF_CALL(residue_explosion);
extern HBUFF_CALL(gun_cooldown);

/* hsnav.c */
extern hbuff_effect STANCE_standard_missile;
extern hbuff_effect STANCE_shield_missile;
extern hbuff_effect STANCE_hull_missile;
extern hbuff_effect STANCE_penetrate_missile;
extern hbuff_effect COOLDOWN_overheat;
extern hbuff_effect COOLDOWN_juke;
extern hbuff_effect COOLDOWN_jive;
extern hbuff_effect COOLDOWN_burst;
extern hbuff_effect COOLDOWN_vanish;
extern hbuff_effect COOLDOWN_reload;
extern HBUFF_CALL(vanish);
extern HBUFF_CALL(reload_nav);
extern int fire_gun(hship *ship, hconsole *con, hweapon *gun, hcontact *q);
extern int fire_missile(hship *ship, hconsole *con, hweapon *gun, hcontact *q);
extern HBUFF_CALL(missile_explosion);
extern HBUFF_CALL(nav_cooldown);

/* hsops.c */
extern hbuff_effect STANCE_standard_beam;
extern hbuff_effect STANCE_shield_beam;
extern hbuff_effect STANCE_hull_beam;
extern hbuff_effect STANCE_penetrate_beam;
extern hbuff_effect COOLDOWN_override;
extern hbuff_effect COOLDOWN_quarantine;
extern hbuff_effect COOLDOWN_reboot;
extern hbuff_effect COOLDOWN_cache;
extern hbuff_effect COOLDOWN_flush;
extern HBUFF_CALL(purge_hack);
extern HBUFF_CALL(reload_ops);
extern HBUFF_CALL(clear_memory);
extern HBUFF_CALL(flush_memory);
extern hbuff_effect HACK_shield;
extern hbuff_effect HACK_reactor;
extern hbuff_effect HACK_engine;
extern hbuff_effect HACK_sensor;
extern hbuff_effect HACK_computer;
extern hbuff_effect HACK_weapon;
extern void use_hack(dbref console, char *which);
extern int fire_wiretap(hship *ship, hconsole *con, hweapon *gun, hcontact *q);
extern int fire_emitter(hship *ship, hconsole *con, hweapon *gun, hcontact *q);
extern HBUFF_CALL(emitter_tick);
extern HBUFF_CALL(ops_cooldown);

/* hspace.c */
extern long hs_cycle_time;
extern long hs_cycle_max;
extern char cycling;
extern int FlagCount(int v);
extern void execute_trigger(dbref obj, char *which, hship *enactor);
extern void execute_ufun(dbref obj, char *which, hship *enactor);
extern char *parse_prompt(hship *ship, hconsole *con, char *prompt);
extern void hs_prompt(dbref console);
extern FILE *spacelog_fp;
extern void hs_log(char *str);
extern void hs_std_error(dbref console, char *msg);
extern void hs_std_warning(dbref console, char *msg, int level);
extern void hs_std_notice(dbref console, char *msg);
extern void notify_srooms(hship *tship, dbref except, char *mesg);
extern void notify_console(dbref console, char *mesg);
extern void notify_consoles(hship *ship, char *mesg);
extern void hs_std_sensor(hship *ship, hcontact *q, char *mesg);
extern void notify_contacts(hship *ship, hship *except, char *mesg);
extern void set_user(dbref console, dbref user);
extern dbref get_user(dbref console);
extern dbref get_console(dbref user);
extern int get_bay_capacity(hship *ship);
extern void update_heading(hship *ship);
extern void update_speed(hship *ship);
extern void update_weapon(hship *ship, hconsole *con, hweapon *gun);
extern void update_shield(hship *ship);
extern void update_hull(hship *ship);
extern void update_reactor(hship *ship);
extern void update_engine(hship *ship);
extern void update_sensor(hship *ship);
extern void update_computer(hship *ship);
extern void update_systems(hship *ship);
extern void update_proximity(hship *ship);
extern void update_position(hship *ship);
extern void update_location(hship *ship);
extern void update_effects(hship *ship);
extern void update_health(hship *ship);
extern void update_mission(hmission *m);
extern void hs_init();
extern void hs_shutdown();
extern void set_cycle(dbref player, int action);
extern void hs_status(dbref player);
extern void hs_version(dbref player);
extern void hs_cycle_ship(hship *ship);
extern void hs_cycle();
extern void hs_dump();
extern int get_firing_cone(hship *ship, hconsole *con, hship *target);
extern double dist3d(double fx, double fy, double fz, double sx, double sy, double sz);
extern int zang(double fx, double fy, double fz, double sx, double sy, double sz);
extern int xyang(double fx, double fy, double sx, double sy);
extern void remove_ship_from_universe(hship *ship);
extern void move_ship(hship *ship, huniverse *uid, double x, double y, double z);
extern void remove_celestial_from_universe(hcelestial *cel);
extern void move_celestial(hcelestial *cel, huniverse *uid, double x, double y, double z);
extern void enter_celestial(hship *ship, hcelestial *landed, dbref pad);
extern void leave_ship(hship *ship);
extern void enter_ship(hship *ship, hship *docked, dbref bay);

#endif

